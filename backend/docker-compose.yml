version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: etally-postgres
    environment:
      POSTGRES_DB: etally_db
      POSTGRES_USER: etally_user
      POSTGRES_PASSWORD: etally_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - '5432:5432'
    networks:
      - etally-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U etally_user -d etally_db']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: etally-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - etally-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # e-Tally Backend API
  backend:
    build: .
    container_name: etally-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://etally_user:etally_password@postgres:5432/etally_db?schema=public
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
      JWT_REFRESH_EXPIRES_IN: 7d
      PORT: 3000
      ENCRYPTION_KEY: your-32-character-encryption-key-here
      MAX_FILE_SIZE: 10485760
      UPLOAD_PATH: ./uploads
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      LOG_LEVEL: info
      LOG_FILE_PATH: ./logs/app.log
      CORS_ORIGIN: http://localhost:3001
      BCRYPT_ROUNDS: 12
      SESSION_SECRET: your-session-secret-here
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - '3000:3000'
    networks:
      - etally-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: etally-nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    networks:
      - etally-network
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  etally-network:
    driver: bridge
